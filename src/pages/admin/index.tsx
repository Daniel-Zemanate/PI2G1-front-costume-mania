import SimpleLayout from "@/layouts/simpleLayout";
import Head from "next/head";
import React, { useEffect } from "react";
import { Frijole } from "next/font/google";
import Breadcrumbs from "@/components/Breadcrumbs";
import { AiOutlineHome } from "react-icons/ai";
import { Tab } from "@headlessui/react";
import AdminCatalog from "@/components/AdminCatalog";
import { GetServerSideProps, NextPage } from "next";
import { getServerSession } from "next-auth";
import { getAdminCatalog } from "@/services/admin.catalog.service";
import { authOptions } from "../api/auth/[...nextauth]";
import { Catalog, CatalogDataTable, Model } from "@/interfaces/catalog";
import {
  getAdminInvoices,
  getInvoiceStatus,
} from "@/services/admin.invoice.service";
import { TableInvoice } from "@/interfaces/invoice";
import AdminInvoices from "@/components/AdminInvoices";
import { saveInvoiceStatus } from "@/store/slices/invoiceSlice";
import { useDispatch } from "react-redux";
import { AppDispatch } from "@/store/store";
import { KeyValue } from "@/interfaces/costume";
import { getAdminCategories } from "@/services/admin.category.service";
import { TableCategory } from "@/interfaces/category";
import AdminCategories from "@/components/AdminCategories";
import Button from "@/components/Button";
import AdminModels from "@/components/AdminModels";
import { FaPlusCircle } from "react-icons/fa";
import { getAdminModel } from "@/services/admin.models.service";
import { ModelDataTable } from "@/interfaces/model";

const frijole = Frijole({
  subsets: ["latin"],
  weight: "400",
});

const testClickEdit = () => {
  alert("hola");
};

type Props = {
  catalogDataTable: CatalogDataTable[];
  invoices: TableInvoice[];
  invoiceStatus: KeyValue[];
  modelDataTable: ModelDataTable[];
  categories: TableCategory[];
};

const AdminPage: NextPage<Props> = ({
  catalogDataTable,
  invoices,
  invoiceStatus,
  categories,
  modelDataTable
}) => {
  const tabs = ["Catalog", "Categories", "Models", "Sales"];

  const dispatch = useDispatch<AppDispatch>();

  useEffect(() => {
    dispatch(saveInvoiceStatus(invoiceStatus));
  }, [dispatch, invoiceStatus]);

  return (
    <SimpleLayout>
      <Head>
        <title>Admin</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="min-h-[50%] w-[90vw] px-4 sm:px-6 lg:px-8">
        <h1
          className={`${frijole.className} text-5xl py-4 md:py-6 text-orange-2`}
          style={{ textShadow: "2px 2px 2px rgba(0, 0, 0, 1)" }}
        >
          Administration
        </h1>
        <Breadcrumbs
          homeElement={<AiOutlineHome />}
          separator={<span> / </span>}
          activeClasses="text-amber-500"
          containerClasses="flex py-2 md:py-4 bg-gradient-to-r from-purple-600 to-blue-600 items-center"
          listClasses="hover:underline mx-2 font-bold"
          capitalizeLinks
        />
        <div className="flex gap-8">
          <Tab.Group>
            <Tab.List className="flex flex-col bg-purple-3 bg-opacity-50 md:text-lg p-4 gap-1 md:gap-2 justify-center mb-2 shadow-md rounded self-start">
              {tabs.map((e, idx) => (
                <Tab
                  key={idx}
                  className={({
                    selected,
                  }) => `w-full rounded-lg py-2.5 px-4 leading-5 text-orange-2 ring-white/60 ring-offset-2 ring-offset-blue-400 focus:outline-none focus:ring-1 text-start 
                    ${
                      selected
                        ? "bg-white shadow"
                        : "text-purple-1 hover:bg-white/[0.12] hover:text-white"
                    }`}
                >
                  {e}
                </Tab>
              ))}
            </Tab.List>
            <Tab.Panels className="w-full">
              <Tab.Panel>
                {/* Crear componente individual - CATALOG */}
                <AdminCatalog data={catalogDataTable}></AdminCatalog>
                <div className="my-8">
                <Button
                  label={
                    <div className="flex items-center justify-center space-x-1">
                      <span className="flex-shrink-0">Add Catalog</span>
                      <FaPlusCircle />
                    </div>
                  }
                  buttonStyle="primary"
                  size="large"
                  onClick={() => testClickEdit()}
                />
                </div>
              </Tab.Panel>
              <Tab.Panel>
                {/* Crear componente individual - CATEGORIES */}
                <AdminCategories categories={categories} />
                <div className="my-8">
                <Button
                  label={
                    <div className="flex items-center justify-center space-x-1">
                      <span className="flex-shrink-0">Add Category</span>
                      <FaPlusCircle />
                    </div>
                  }
                  buttonStyle="primary"
                  size="large"
                  onClick={() => testClickEdit()}
                />
                </div>
              </Tab.Panel>
              <Tab.Panel>
                {/* Crear componente individual - MODELS */}
                <AdminModels data={catalogDataTable}></AdminModels>
                <div className="my-8">
                <Button
                  label={
                    <div className="flex items-center justify-center space-x-1">
                      <span className="flex-shrink-0">Add Model</span>
                      <FaPlusCircle />
                    </div>
                  }
                  buttonStyle="primary"
                  size="large"
                  onClick={() => testClickEdit()}
                />
                </div>
              </Tab.Panel>
              <Tab.Panel>
                <AdminInvoices invoices={invoices} />
              </Tab.Panel>
            </Tab.Panels>
          </Tab.Group>
        </div>
      </section>
    </SimpleLayout>
  );
};

export const getServerSideProps: GetServerSideProps = async ({
  query,
  req,
  res,
}) => {
  const session = await getServerSession(req, res, authOptions);
  if (session) {
    const { token, user_id: idUser } = session?.user;

    try {
      const apiAdminCatalog = await getAdminCatalog();
      const catalogDataTable = formatCatalog(apiAdminCatalog);
      // INVOICES
      const invoices = await getAdminInvoices();
      // SHIPPING STATUS
      const invoiceStatus = await getInvoiceStatus();
      // CATEGORIES
      const categories = await getAdminCategories({ token });
      // MODELS
      const models = await getAdminModel();
      const modelsDataTable = formatModels(models);

      return {
        props: {
          catalogDataTable,
          invoices,
          invoiceStatus,
          // categories,
        },
      };
    } catch (error) {
      // Handle errors if necessary
      console.error("Error fetching data:", error);
      return {
        props: {
          apiAdminCatalog: null,
          apiAdminInvoices: null,
        },
      };
    }
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};

function formatCatalog(apiAdminCatalog: Catalog[]) {
  let catalogData: CatalogDataTable[] = [];
  apiAdminCatalog.map((data) => {
    catalogData.push({
      id: data.idCatalog,
      model: data.model.nameModel,
      adult: data.size.adult ? "Yes" : "No",
      size: data.size.noSize,
      status: data.statusCatalog.description,
      stock: data.stock,
      price: data.price,
      category: data.model.category.name,
    });
  });

  return catalogData;
}

function formatModels(apiModels: Model[]) {
  let modelData: ModelDataTable[] = [];
  apiModels.map((data) => {
    modelData.push({
      id: data.idModel,
      model: data.nameModel,
      category: data.category.name,
    });
  });

  return modelData;
}

export default AdminPage;
