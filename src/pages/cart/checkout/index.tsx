import "react-credit-cards-2/dist/es/styles-compiled.css";
import Breadcrumbs from "@/components/Breadcrumbs";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import { AiOutlineHome } from "react-icons/ai";
import { Frijole } from "next/font/google";
import { useSession } from "next-auth/react";
import { getShipping } from "@/services/shipping.service";
import { GetServerSideProps, NextPage } from "next";
import { ApiShipping } from "@/interfaces/shipping";
import { SelectOption } from "@/components/Form/FormSelect";
import { useSelector } from "react-redux";
import { getCartState } from "@/store/slices/cartSlice";
import CheckoutForm from "@/components/CheckoutForm";
import { getUserInfo } from "@/services/users.service";
import { getServerSession } from "next-auth";
import { authOptions } from "@/pages/api/auth/[...nextauth]";
import { UserData } from "@/interfaces/user";
import DisplayOrder from "@/components/DisplayOrder";
import { useRouter } from "next/router";
import SimpleLayout from "@/layouts/simpleLayout";

const frijole = Frijole({
  subsets: ["latin"],
  weight: "400",
});

export interface CheckoutData {
  fullName: string;
  email: string;
  phoneNumber: string;
  address: string;
  city: string;
  zipCode: string;
  cardNumber: string;
  cardName: string;
  cvc: string;
  expirationDate: string;
  phoneNumberBill: string;
  addressBill: string;
  cityBill: string;
  zipCodeBill: string;
}

type Props = {
  userData: UserData;
  apiShipping: ApiShipping[];
};

const CheckoutPage: NextPage<Props> = ({ apiShipping, userData }) => {
  const { data: session } = useSession();
  const [cities, setCities] = useState<SelectOption[]>([]);
  const { items: cartItems } = useSelector(getCartState);
  const router = useRouter();

  useEffect(() => {
    if(cartItems.length === 0){
      router.push("/")
    }
  },[cartItems.length, router])

  useEffect(() => {
    const selectOptions: SelectOption[] = [];

    apiShipping?.forEach((item) => {
      selectOptions.push({ value: item.idShippping, label: item.destination });
    });
    setCities(selectOptions);
  }, [session, apiShipping]);

  return (
    <SimpleLayout>
      <Head>
        <title>Checkout</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="min-h-[50%] w-[90vw] px-4 sm:px-6 lg:px-8">
        <h1
          className={`${frijole.className} text-5xl py-4 md:py-6 text-orange-2`}
          style={{ textShadow: "2px 2px 2px rgba(0, 0, 0, 1)" }}
        >
          Account
        </h1>
        <Breadcrumbs
          homeElement={<AiOutlineHome />}
          separator={<span> / </span>}
          activeClasses="text-amber-500"
          containerClasses="flex py-2 md:py-4 bg-gradient-to-r from-purple-600 to-blue-600 items-center"
          listClasses="hover:underline mx-2 font-bold"
          capitalizeLinks
        />
        <div className="flex flex-col-reverse md:flex-row gap-4 mb-4">
          <CheckoutForm
            account={userData}
            cities={cities}
            className="w-full md:w-2/3"
          />
          <DisplayOrder className="w-full py-4 md:w-1/3" />
        </div>
      </section>
    </SimpleLayout>
  );
};

export const getServerSideProps: GetServerSideProps = async ({
  query,
  req,
  res,
}) => {
  const session = await getServerSession(req, res, authOptions);
  if (session) {
    const { token, user_id: idUser } = session?.user;

    try {
      const userData = await getUserInfo(token);
      const apiShipping = await getShipping();

      return {
        props: {
          userData,
          apiShipping,
        },
      };
    } catch (error) {
      // Handle errors if necessary
      console.error("Error fetching data:", error);
      return {
        props: {
          userData: null,
          apiShipping: null,
        },
      };
    }
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};

export default CheckoutPage;
