import SimpleLayout from "@/layouts/simpleLayout";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import Breadcrumbs from "@/components/Breadcrumbs";
import { AiOutlineHome } from "react-icons/ai";
import { CartList } from "@/components/CartList";
import { AppDispatch, useDispatch, useSelector } from "@/store/store";
import { getCartState, validateCart } from "@/store/slices/cartSlice";
import { Frijole } from "next/font/google";
import Button from "@/components/Button";
import { getShipping } from "@/services/shipping.service";
import { GetStaticProps } from "next";
import { ApiShipping } from "@/interfaces/shipping";
import Select from "@/components/Select";
import { FetchResult } from "@/interfaces/costume";
import { PayloadAction } from "@reduxjs/toolkit";
import { useSession } from "next-auth/react";

type Props = {
  cities: ApiShipping[];
};

const frijole = Frijole({
  subsets: ["latin"],
  weight: "400",
});

const CartPage = ({ cities }: Props) => {
  const { items: cartItems, total, shipping } = useSelector(getCartState);
  const dispatch = useDispatch();
  const { data: session } = useSession();

  const [subtotal, setSubtotal] = useState(0)

  const selectOptions = (Array.isArray(cities) ? cities : []).map((item) => ({
    key: item.idShippping,
    value: item.destination,
  }));

  useEffect(() => {
    const newSubTotal = cartItems.reduce(
      (total, item) => total + item.costume.price * item.quantity,
      0
    );

    setSubtotal(newSubTotal);
  }, [cartItems]);

  const handleSelectCity = async (key: string, value: any) => {
    const cart = cartItems.map((e) => ({
      catalog: e.idCatalog,
      quantitySold: e.quantity,
    }));

    if (session) {
      const { payload } = (await dispatch(
        validateCart({ cart: cart, idUser: session.user.user_id, city: value })
      )) as PayloadAction<
        FetchResult & {
          shipping: number;
          total: number;
          errorMessage: string | null;
        }
      >;
    }
  };

  return (
    <SimpleLayout>
      <Head>
        <title>Cart</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-[50%] w-[90vw] px-4 sm:px-6 lg:px-8">
        <h1
          className={`${frijole.className} text-5xl py-4 md:py-6 text-orange-2`}
          style={{ textShadow: "2px 2px 2px rgba(0, 0, 0, 1)" }}
        >
          Cart
        </h1>
        <Breadcrumbs
          homeElement={<AiOutlineHome />}
          separator={<span> / </span>}
          activeClasses="text-amber-500"
          containerClasses="flex py-2 md:py-4 bg-gradient-to-r from-purple-600 to-blue-600 items-center"
          listClasses="hover:underline mx-2 font-bold"
          capitalizeLinks
        />
        <div className="flex flex-col sm:flex-row space-x-4">
          <CartList cartItems={cartItems}></CartList>

          {/* TOTALS + city */}
          {cartItems.length > 0 && (
            <aside className="bg-white shadow-md rounded-xl hover:shadow-xl bg-white sm:w-1/4 md:max-w-2xl flex-column items-center justify-center p-8 h-fit">
              <Select
                options={selectOptions}
                label="Region"
                onChange={handleSelectCity}
                defaultValue={{key: '', value: ''}}
              />
              {shipping === undefined && (
                <small className="text-grey">
                  Please, select your city to continue
                </small>
              )}
              {shipping !== undefined && (
                <div className="flex items-center justify-between my-2">
                  <span>Shipping cost</span>
                  <span className="text-lg font-bold text-black truncate block">
                    $ {shipping.toFixed(2)}
                  </span>
                </div>
              )}
              <div className="flex items-center justify-between my-2">
                <span>Subtotal</span>
                <span className="text-lg font-bold text-black truncate block">
                  $ {subtotal.toFixed(2)}
                </span>
              </div>
              <hr></hr>
              {total && (
                <div className="flex items-center justify-between my-2">
                  <span>Total</span>
                  <span className="text-lg font-bold text-black truncate block">
                    $ {total.toFixed(2)}
                  </span>
                </div>
              )}
              <div className="flex items-center justify-center my-2">
                <Button
                  label={"Checkout"}
                  buttonStyle="primary"
                  size="small"
                  className="w-full"
                  to="/cart/checkout"
                  disabled={shipping === undefined}
                />
              </div>
            </aside>
          )}
        </div>
      </main>
    </SimpleLayout>
  );
};

export const getStaticProps: GetStaticProps = async () => {
  const cities = await getShipping();

  return {
    props: {
      cities,
    },
  };
};

export default CartPage;
